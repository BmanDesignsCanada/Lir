#!/usr/bin/env python3.4

import sys
_version = float(str(sys.version_info[0]) + '.' + str(sys.version_info[1]))

if _version < 3.0:
    #to avoid syntax error in 3.0 +
    exec("print \"Python 3.0 or higher is required\"")
    sys.exit(1)
    
from gi.repository import Gtk as gtk
from gi.repository import AppIndicator3 as appindicator
import signal,os

import lir

APPINDICATOR_ID = 'Lir'

PAIR        = os.getcwd()+"/"+"pair" 

def main():
    indicator = appindicator.Indicator.new(APPINDICATOR_ID, lir.FileSystem.ICON, appindicator.IndicatorCategory.SYSTEM_SERVICES)
    indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
    indicator.set_menu(build_menu())
    build_menu()
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    gtk.main()
    
def build_menu():
    menu = gtk.Menu()
    
    #item_settings = gtk.MenuItem("Settings")
    #item_settings.connect("activate",launch_settings)
    #menu.append(item_settings)
    
    item_pair = gtk.MenuItem("Pair Device")
    item_pair.connect("activate",launch_pair)
    menu.append(item_pair)
    
    item_quit = gtk.MenuItem('Quit')
    item_quit.connect('activate', quit)
    menu.append(item_quit)
    
    menu.show_all()
    return menu
 
def launch_pair(source):
    os.system(PAIR)
 
def launch_settings(source):
    pass
 
def quit(source):
    with open(lir.FileSystem.expand_path("~/.lir/.server.pid"),"r") as f:
        pid = f.read()
    os.system("kill "+pid)
    print("Killed ",pid)
    gtk.main_quit()
    
if __name__ == "__main__":
    main()
